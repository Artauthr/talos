buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } // snapshots
    }

    dependencies {
        classpath 'com.squareup:javapoet:1.13.0'
        classpath "org.projectlombok:lombok:1.18.22"
        classpath "com.badlogicgames.gdx:gdx:$project.gdxVersion"
        classpath "com.badlogicgames.gdx:gdx-tools:$project.gdxVersion"
    }
}

dependencies {

    implementation project(":editor")

    implementation libs.bongo.desktop

    implementation libs.logback.core
    implementation libs.logback.classic

    implementation variantOf(libs.tiny.gizmo) { classifier("natives-desktop") }
    implementation libs.javapoet

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["assets"]

project.ext.mainClassName = "com.talosvfx.talos.TalosLauncher"
project.ext.assetsDir = new File("assets")


task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (System.properties['os.name'].toLowerCase().contains('mac')) {
        jvmArgs = ["-XstartOnFirstThread"]
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true

    if (System.properties['os.name'].toLowerCase().contains('mac')) {
        jvmArgs = ["-XstartOnFirstThread"]
    }
}

task dist(dependsOn: 'generateBuildConfig', type: Jar) {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task distLegacyTest(type: Jar) {
    manifest {
        attributes 'Main-Class': "com.talosvfx.talos.test.LegacyCompareTest"
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dist.dependsOn classes


import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec
import javax.lang.model.element.Modifier
import com.badlogic.gdx.Application
import com.badlogic.gdx.Gdx
import com.badlogic.gdx.utils.SharedLibraryLoader
import lombok.Getter

def addStringField (TypeSpec.Builder builder, String fieldName, String fieldValue) {
    FieldSpec fieldSpec = FieldSpec.builder(String.class, fieldName)
            .addModifiers(Modifier.PRIVATE, Modifier.FINAL, Modifier.STATIC)
            .addAnnotation(Getter.class)
            .initializer('$S', fieldValue)
            .build()

    builder.addField(fieldSpec)
}

def addIntField (TypeSpec.Builder builder, String fieldName, int fieldValue) {
    FieldSpec fieldSpec = FieldSpec.builder(int.class, fieldName)
            .addModifiers(Modifier.PRIVATE, Modifier.FINAL, Modifier.STATIC)
            .addAnnotation(Getter.class)
            .initializer('$L', fieldValue)
            .build()

    builder.addField(fieldSpec)
}

def addDateField (TypeSpec.Builder builder, String fieldName, long fieldValue) {
    FieldSpec fieldSpec = FieldSpec.builder(Date.class, fieldName)
            .addModifiers(Modifier.PRIVATE, Modifier.FINAL, Modifier.STATIC)
            .addAnnotation(Getter.class)
            .initializer('new Date($Ll)', fieldValue)
            .build()

    builder.addField(fieldSpec)
}

task generateBuildConfig {

    description 'Generate build config java file'

    outputs.upToDateWhen { false }

    doFirst {

        MethodSpec printHeader = MethodSpec.methodBuilder("printHeader")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T.out.println($S)', System.class, "      ___           ___           ___       ___           ___     \n" +
                        "     /\\  \\         /\\  \\         /\\__\\     /\\  \\         /\\  \\    \n" +
                        "     \\:\\  \\       /::\\  \\       /:/  /    /::\\  \\       /::\\  \\   \n" +
                        "      \\:\\  \\     /:/\\:\\  \\     /:/  /    /:/\\:\\  \\     /:/\\ \\  \\  \n" +
                        "      /::\\  \\   /::\\~\\:\\  \\   /:/  /    /:/  \\:\\  \\   _\\:\\~\\ \\  \\ \n" +
                        "     /:/\\:\\__\\ /:/\\:\\ \\:\\__\\ /:/__/    /:/__/ \\:\\__\\ /\\ \\:\\ \\ \\__\n" +
                        "    /:/  \\/__/ \\/__\\:\\/:/  / \\:\\  \\    \\:\\  \\ /:/  / \\:\\ \\:\\ \\/__/\n" +
                        "   /:/  /           \\::/  /   \\:\\  \\    \\:\\  /:/  /   \\:\\ \\:\\__\\  \n" +
                        "   \\/__/            /:/  /     \\:\\  \\    \\:\\/:/  /     \\:\\/:/  /  \n" +
                        "                   /:/  /       \\:\\__\\    \\::/  /       \\::/  /   \n" +
                        "                   \\/__/         \\/__/     \\/__/         \\/__/    \n")
                .build()


        MethodSpec printDate = MethodSpec.methodBuilder("printDate")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T cal = $T.getInstance()', Calendar.class, Calendar.class)
                .addStatement('$T.out.println($S + cal.getTime().toString())', System.class, "Current Date: ")
                .build()


        MethodSpec printVersion = MethodSpec.methodBuilder("printVersion")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T.out.println($S + versionString)', System.class, "Runtime Version: ")
                .addStatement('$T.out.println($S + commit)', System.class, "Runtime commit: ")
                .addStatement('$T.out.println($S + branch)', System.class, "Runtime branch: ")
                .build()

        MethodSpec printSystemInfo = MethodSpec.methodBuilder("printSystemInfo")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T is64Bit = $T.is64Bit', boolean.class, SharedLibraryLoader.class)
                .addStatement('$T applicationType = $T.app.getType()', Application.ApplicationType.class, Gdx.class)
                .addStatement('$T.out.println($S + applicationType.name())', System.class, "Platform: ")
                .addStatement('$T.out.println($S + is64Bit)', System.class, "Is 64 Bit: ")

                .addStatement('$T glVersion = $T.graphics.getGLVersion().getDebugVersionString()', String.class, Gdx.class)
                .addStatement('$T.out.println(glVersion)', System.class)
                .build()

        MethodSpec printAll = MethodSpec.methodBuilder("printAll")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(void.class)
                .addStatement('printHeader()')
                .addStatement('printDate()')
                .addStatement('printVersion()')
                .addStatement('printSystemInfo()')
                .build()


        TypeSpec.Builder classSpecBuilder = TypeSpec.classBuilder("TALOS_BUILD")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)


        //Meta

        def buildInfo = project(":editor").getBuildInfo()
        /*

            def versionString
            def buildHash
            def commit
            def branch
            def date

         */

        addStringField(classSpecBuilder, "versionString", buildInfo.versionString as String)
        addStringField(classSpecBuilder, "buildHash", buildInfo.buildHash as String)
        addStringField(classSpecBuilder, "commit", buildInfo.commit as String)
        addStringField(classSpecBuilder, "branch", buildInfo.branch as String)
        addDateField(classSpecBuilder, "buildDate", buildInfo.date as Long)

        classSpecBuilder
                .addMethod(printHeader)
                .addMethod(printDate)
                .addMethod(printVersion)
                .addMethod(printSystemInfo)
                .addMethod(printAll)

        TypeSpec classSpec = classSpecBuilder.build()

        JavaFile javaFile = JavaFile.builder("com.talosvfx.talos", classSpec).build()
        javaFile.writeTo(System.out)

        def file = new File("$projectDir/src/")
        javaFile.writeTo(file)
    }

}